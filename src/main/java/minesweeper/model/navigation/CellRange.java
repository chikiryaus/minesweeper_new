package minesweeper.model.navigation;

/**
 * Представляет допустимый диапазон значений, например, для индексов строк или столбцов на игровом поле.
 * Диапазон определяется минимальным и максимальным значениями (включительно).
 * Использует 0-индексацию, то есть минимальное значение не может быть отрицательным.
 */
public class CellRange {
    /**
     * Минимальное значение диапазона (включительно).
     */
    private final int _min;
    /**
     * Максимальное значение диапазона (включительно).
     */
    private final int _max;

    /**
     * Создает новый объект {@code CellRange} с указанными минимальным и максимальным значениями.
     * Если {@code min} меньше 0, он будет установлен в 0.
     * Если {@code max} меньше {@code min} (после возможной коррекции {@code min}), {@code max} будет установлен равным {@code min}.
     *
     * @param min Желаемое минимальное значение диапазона.
     * @param max Желаемое максимальное значение диапазона.
     */
    public CellRange(int min, int max) {
        if (min < 0) {
            min = 0; // Диапазон не может начинаться с отрицательного значения
        }
        if (max < min) {
            max = min; // Максимум не может быть меньше минимума
        }
        _min = min;
        _max = max;
    }

    /**
     * Возвращает минимальное значение данного диапазона.
     *
     * @return Минимальное значение (включительно).
     */
    public int min() {
        return _min;
    }

    /**
     * Возвращает максимальное значение данного диапазона.
     *
     * @return Максимальное значение (включительно).
     */
    public int max() {
        return _max;
    }

    /**
     * Возвращает длину (количество целых чисел) в данном диапазоне.
     * Например, для диапазона [0..2] длина будет 3 (0, 1, 2).
     *
     * @return Длина диапазона.
     */
    public int length() {
        return _max - _min + 1;
    }

    /**
     * Статический метод для проверки, образуют ли указанные минимальное и максимальное значения валидный диапазон.
     * Валидный диапазон предполагает, что {@code min} не отрицателен и {@code max} не меньше {@code min}.
     *
     * @param min Минимальное значение для проверки.
     * @param max Максимальное значение для проверки.
     * @return {@code true}, если значения образуют валидный диапазон, иначе {@code false}.
     */
    public static boolean isValidRange(int min, int max) {
        return min >= 0 && max >= min;
    }

    /**
     * Проверяет, содержится ли указанное значение внутри данного диапазона (включительно).
     *
     * @param val Значение для проверки.
     * @return {@code true}, если значение находится в диапазоне [min..max], иначе {@code false}.
     */
    public boolean contains(int val) {
        return val >= _min && val <= _max;
    }

    /**
     * Возвращает строковое представление данного диапазона.
     * Формат строки: "CellRange[min..max]".
     *
     * @return Строковое представление диапазона.
     */
    @Override
    public String toString() {
        return "CellRange[" + _min + ".." + _max + "]";
    }
}